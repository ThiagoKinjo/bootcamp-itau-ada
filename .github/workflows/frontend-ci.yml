Importante lembrar que:
Dentro de cada workflow, os steps de teste e build do Docker deverão ser separados;
Seus workflows deverão rodar no Runner self-hosted que criamos anteriormente;
Os workflows obrigatoriamente deverão estar numa pasta chamada .github/workflows;
Para mandar sua imagem Docker para o GitHub Packages, você deverá gerar um Personal Access Token (PAT), aqui você encontra a documentação;
Os worklflows deverão ser disparados quanto a branch main for alterada, porém as mudanças deverão via a partir de Pull Requests;
Os Dockerfile estão dentro da pasta de cada aplicação;
Observações sobre a app de Frontend:
Essa app só requer dois passos: rodar os testes e build da imagem Docker:
# as dependencias necessarias sao o npm e a angular-cli
$ apt-get update && apt-get -y install npm
$ npm install -g @angular/cli

# rodar testes
$ ng test


name: Build frontend app and deploy

defaults:
  run:
    working-directory: "frontend/"

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'frontend/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  BuildAndTest:
    name: Build frontend app and deploy
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Set up nodejs 14
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Getting dependencies
      run: |
        cd app/
        npm install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/frontend-app:latest .
        docker push ${{ env.ECR_REGISTRY }}/frontend-app:latest

    - name: Connect to Bastion Host
      run: |
        sudo apt-get update && sudo apt-get -y install sshuttle awscli
        aws secretsmanager get-secret-value --secret-id ${{ secrets.PRIVATE_KEY_ARN }} --query SecretString --output text > ~/aws.pem
        chmod 400 ~/aws.pem
        sshuttle -r ubuntu@${{ secrets.BASTION_HOST_IP }} 10.10.0.0/24 -vv --ssh-cmd 'ssh -i ~/aws.pem  -o StrictHostKeyChecking=accept-new' &

    - name: Rollout K8s deployment
      run: |
        mkdir ~/.kube
        aws secretsmanager get-secret-value --secret-id ${{ secrets.KUBECONFIG }} --query SecretString --output text > ~/.kube/config
        kubectl rollout restart deployment frontend-app -n ada-apps || true
